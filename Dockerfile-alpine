# This image uses 2 interstage and an alpine final stage
#
# Interstages are:
#   - composer
#   - npm & yarn & grunt
#
# Final stage gets all that generated stuff and add it to the final image source code
#

############################
#=== composer interstage ===
############################
FROM composer:1.6.1 as composer
WORKDIR /app
COPY scripts/moveVendors.sh ./scripts/
COPY composer.json composer.lock ./
RUN set -x \
 && composer install --verbose --no-dev

########################
#=== yarn interstage ===
########################
FROM node:latest as yarn
WORKDIR /app
COPY --from=composer /app/phpmyfaq ./phpmyfaq
COPY package.json yarn.lock Gruntfile.js ./
RUN set -x \
 && npm install node-sass -g --unsafe-perm \
 && yarn install \
 && yarn build

#################################
#=== Final stage with payload ===
#################################
FROM php:7.2-alpine

MAINTAINER PhpMyFAQ Team <adrien.estanove@gmail.fr>

#=== Install gd php dependencie ===
RUN set -x \
 && apk add --no-cache \
  freetype \
  libpng \
  libjpeg-turbo \
 && apk add --no-cache --virtual .build-deps \
  $PHPIZE_DEPS \
  freetype-dev \
  libpng-dev \
  libjpeg-turbo-dev \
 \
 && docker-php-ext-configure gd \
  --with-gd \
  --with-freetype-dir=/usr/include/ \
  --with-png-dir=/usr/include/ \
  --with-jpeg-dir=/usr/include/ \
 && NPROC=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) \
 && docker-php-ext-install -j${NPROC} gd \
 \
 && apt-get purge -y ${buildDeps} \
 && rm -rf /var/lib/apt/lists/*

#=== Install ldap php dependencie ===
RUN set -x \
 && apk add --no-cache --virtual .build-deps \
  $PHPIZE_DEPS \
  libldap2-dev \
 \
 && docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu/ \
 && docker-php-ext-install ldap \
 \
 && apk del .build-deps \
 && rm -rf /tmp/* /usr/local/lib/php/doc/* /var/cache/apk/*

#=== Install intl, mcrypt, soap and zip php dependencie ===
RUN set -x \
 && apk add --no-cache \
  icu \
 && apk add --no-cache --virtual .build-deps \
  $PHPIZE_DEPS \
  zlib-dev \
  icu-dev \
  mcrypt-dev \
  xml2-dev \
 && docker-php-ext-configure intl \
 && docker-php-ext-install intl \
 && docker-php-ext-enable intl \
 && docker-php-ext-install zip \
 && docker-php-ext-enable zip \
 && docker-php-ext-install mcrypt \
 && docker-php-ext-enable mcrypt \
 && docker-php-ext-install soap \
 && docker-php-ext-enable soap \
 \
 && apk del .build-deps \
 && rm -rf /tmp/* /usr/local/lib/php/doc/* /var/cache/apk/*

#=== Install mysqli php dependencie ===
RUN set -x \
 && docker-php-ext-install mysqli

#=== Install pgsql dependencie ===
RUN set -ex \
 && apk add --no-cache \
  postgresql-libs \
 && apk add --no-cache --virtual .build-deps \
  $PHPIZE_DEPS \
  postgresql-dev \
 && docker-php-ext-install pgsql \
 \
 && apk del .build-deps \
 && rm -rf /tmp/* /usr/local/lib/php/doc/* /var/cache/apk/*

#=== Configure php ===
RUN { \
  echo "register_globals = off"; \
  echo "safe_mode = off"; \
  echo "file_upload = on"; \
 } | tee "$PHP_INI_DIR/php.ini"

#=== Add phpMyFAQ source code ===
COPY phpmyfaq ./phpmyfaq

#=== Add tier assets from previously built interstage ===
COPY --from=yarn /app/phpmyfaq ./phpmyfaq

#=== Set custom entrypoint ===
COPY docker-entrypoint.sh /entrypoint
RUN chmod +x /entrypoint
ENTRYPOINT [ "/entrypoint" ]

#=== Re-Set CMD as we changed the default entrypoint ===
CMD [ "apache2-foreground" ]
